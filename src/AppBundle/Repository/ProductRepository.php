<?php

namespace AppBundle\Repository;
use Doctrine\ORM\Tools\Pagination\Paginator;
use DateTime;



/**
 * ProductRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProductRepository extends \Doctrine\ORM\EntityRepository
{

    /**
     * @return array
     */
    public function getNewestProducts()
    {
        $date = new DateTime();
        $products = $this->createQueryBuilder('p')
            ->setParameter('date', $date, \Doctrine\DBAL\Types\Type::DATETIME)
            ->where('p.expiringDate >= :date')
            ->orderBy('p.creationDate', 'DESC')
            ->setMaxResults(7)
            ->getQuery()
            ->getResult();

        return $products;
    }

    public function getMostViewedProducts()
    {
        $date = new DateTime();
        $products = $this->createQueryBuilder('p')
            ->setParameter('date', $date, \Doctrine\DBAL\Types\Type::DATETIME)
            ->where('p.expiringDate >= :date')
            ->orderBy('p.numVisits', 'DESC')
            ->setMaxResults(6)
            ->getQuery()
            ->getResult();

        return $products;
    }

    public function getAllProducts(){

        $date = new DateTime();
        $products = $this->createQueryBuilder('p')
            ->setParameter('date', $date, \Doctrine\DBAL\Types\Type::DATETIME)
            ->where('p.expiringDate >= :date')
            ->getQuery()
            ->getResult();

        return $products;
    }

    public function getOrderedByPopular($currentPage = 1, $limit = 12)
    {
        $date = new DateTime();
        $products = $this->createQueryBuilder('p')
            ->setParameter('date', $date, \Doctrine\DBAL\Types\Type::DATETIME)
            ->where('p.expiringDate >= :date')
            ->setFirstResult($limit * ($currentPage - 1))
            ->setMaxResults($limit)
            ->orderBy('p.numVisits', 'DESC')
            ->getQuery()
            ->getResult();

        return $products;
    }


    public function remove($category, $uuid)
    {

        $ret = $this->getEntityManager()->createQuery(
            'DELETE p FROM AppBundle:Product p WHERE p.category = :category AND p.normalizedName = :uuid'
        )->setParameters(array(
            'category' => $category,
            'uuid' => $uuid
        ))->execute();

        return $ret !== null;
    }

}
